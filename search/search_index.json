{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ENACOM Python bootcamp Processo completo de constru\u00e7\u00e3o e utiliza\u00e7\u00e3o de uma API (Interface de programa\u00e7\u00e3o de aplica\u00e7\u00f5es) para resolver um problema de otimiza\u00e7\u00e3o. Desafio ENACOM Python bootcamp Para detalhes sobre o desafio acesse: Desafio ENACOM Python bootcamp 1. Defini\u00e7\u00e3o da API com OpenAPI Explica\u00e7\u00e3o da especifica\u00e7\u00e3o OpenAPI Para visualizar a especifica\u00e7\u00e3o como documenta\u00e7\u00e3o din\u00e2mica vamos usar o editor do swagger 2. Defini\u00e7\u00e3o das regras de neg\u00f3cio em testes de unidade com Pytest 3. Estrutura\u00e7\u00e3o dos dados iniciais em Python com Pydantic 4. Envio de dados de entrada no formato JSON com Postman Com o Postman aberto, importe a cole\u00e7\u00e3o de cen\u00e1rios, dispon\u00edvel na raiz do reposit\u00f3rio: enacom_python_bootcamp.postman_collection.json Ao abrir um cen\u00e1rio confira se est\u00e1 sendo feita uma requisi\u00e7\u00e3o do tipo POST para o endere\u00e7o http://0.0.0.0:9000/solve 5. Uso de m\u00e9todos de otimiza\u00e7\u00e3o para resolu\u00e7\u00e3o do problema Usaremos a biblioteca desenvolvida pela ENACOM dispon\u00edvel no PyPI (The Python Package Index): science-optimization . Ela resolve problemas que apresentam a seguinte forma: Achar o valor da vari\u00e1vel de entrada x que gera o menor valor de sa\u00edda f(x) , por\u00e9m respeitando os limites g(x) <= 0 , h(x) <= 0 , para x dentro de um faixa de valores entre x_min e x_max inclusos. 6. Modelagem de um problema de otimiza\u00e7\u00e3o Problema: encontrar a aloca\u00e7\u00e3o \u00f3tima dos modelos de trens Objetivo: maximizar a quantidade de vag\u00f5es em trem. Restri\u00e7\u00f5es: disponibilidade de vag\u00f5es e locomotivas. Modelo matem\u00e1tico do problema i \u00e9 o \u00edndice do modelo de trem; w_i \u00e9 a quantidade de vag\u00f5es do modelo de trem i ; l_i \u00e9 a quantidade de locos do modelo de trem i ; W \u00e9 a disponiblilidade de vag\u00f5es; L \u00e9 a disponiblilidade de locomotivas; x_i \u00e9 a quantidade de trens alocados por modelo. Modelo computacional do problema optimization/optimizer.py \"\"\" Solver for optimization problem. \"\"\" def build_allocation_problem ( wagons : np . ndarray , locomotives : np . ndarray , total_wagons : int , total_locomotives : int , verbose : bool = True ) -> OptimizationProblem : \"\"\" Build a allocation optimization problem. Args: wagons (np.ndarray): Wagons for each train model. locomotives (np.ndarray): Locomotives for each train model. total_wagons (int): Total of available wagons. total_locomotives (int): Total of available locomotives. verbose (bool, optional): Show problem informations. Defaults to True. Raises: ValueError: Inconsistent problem when total of models is diffents for locomotives and wagons. Also inconsistent problem when or total of available wagons or locomotives are negatives. Returns: OptimizationProblem: structured optimization problem. \"\"\" ... def optimize_allocation ( problem : OptimizationProblem ) -> tuple [ ndarray , ndarray ]: \"\"\" Solver a optimization allocation problem. Args: problem (OptimizationProblem): Structured optimization problem. Returns: tuple[ndarray, ndarray]: train_models end allocation. \"\"\" ... 7. Cria\u00e7\u00e3o dos dados de sa\u00edda em Python com Pydantic 8. Recebimento dos dados de sa\u00edda no formato JSON com Postman 9. An\u00e1lise do resultado da otimiza\u00e7\u00e3o","title":"ENACOM Python bootcamp"},{"location":"#enacom-python-bootcamp","text":"Processo completo de constru\u00e7\u00e3o e utiliza\u00e7\u00e3o de uma API (Interface de programa\u00e7\u00e3o de aplica\u00e7\u00f5es) para resolver um problema de otimiza\u00e7\u00e3o.","title":"ENACOM Python bootcamp"},{"location":"#desafio-enacom-python-bootcamp","text":"Para detalhes sobre o desafio acesse: Desafio ENACOM Python bootcamp","title":"Desafio ENACOM Python bootcamp"},{"location":"#1-definicao-da-api-com-openapi","text":"Explica\u00e7\u00e3o da especifica\u00e7\u00e3o OpenAPI Para visualizar a especifica\u00e7\u00e3o como documenta\u00e7\u00e3o din\u00e2mica vamos usar o editor do swagger","title":"1. Defini\u00e7\u00e3o da API com OpenAPI"},{"location":"#2-definicao-das-regras-de-negocio-em-testes-de-unidade-com-pytest","text":"","title":"2. Defini\u00e7\u00e3o das regras de neg\u00f3cio em testes de unidade com Pytest"},{"location":"#3-estruturacao-dos-dados-iniciais-em-python-com-pydantic","text":"","title":"3. Estrutura\u00e7\u00e3o dos dados iniciais em Python com Pydantic"},{"location":"#4-envio-de-dados-de-entrada-no-formato-json-com-postman","text":"Com o Postman aberto, importe a cole\u00e7\u00e3o de cen\u00e1rios, dispon\u00edvel na raiz do reposit\u00f3rio: enacom_python_bootcamp.postman_collection.json Ao abrir um cen\u00e1rio confira se est\u00e1 sendo feita uma requisi\u00e7\u00e3o do tipo POST para o endere\u00e7o http://0.0.0.0:9000/solve","title":"4. Envio de dados de entrada no formato JSON com Postman"},{"location":"#5-uso-de-metodos-de-otimizacao-para-resolucao-do-problema","text":"Usaremos a biblioteca desenvolvida pela ENACOM dispon\u00edvel no PyPI (The Python Package Index): science-optimization . Ela resolve problemas que apresentam a seguinte forma: Achar o valor da vari\u00e1vel de entrada x que gera o menor valor de sa\u00edda f(x) , por\u00e9m respeitando os limites g(x) <= 0 , h(x) <= 0 , para x dentro de um faixa de valores entre x_min e x_max inclusos.","title":"5. Uso de m\u00e9todos de otimiza\u00e7\u00e3o para resolu\u00e7\u00e3o do problema"},{"location":"#6-modelagem-de-um-problema-de-otimizacao","text":"","title":"6. Modelagem de um problema de otimiza\u00e7\u00e3o"},{"location":"#problema-encontrar-a-alocacao-otima-dos-modelos-de-trens","text":"Objetivo: maximizar a quantidade de vag\u00f5es em trem. Restri\u00e7\u00f5es: disponibilidade de vag\u00f5es e locomotivas.","title":"Problema: encontrar a aloca\u00e7\u00e3o \u00f3tima dos modelos de trens"},{"location":"#modelo-matematico-do-problema","text":"i \u00e9 o \u00edndice do modelo de trem; w_i \u00e9 a quantidade de vag\u00f5es do modelo de trem i ; l_i \u00e9 a quantidade de locos do modelo de trem i ; W \u00e9 a disponiblilidade de vag\u00f5es; L \u00e9 a disponiblilidade de locomotivas; x_i \u00e9 a quantidade de trens alocados por modelo.","title":"Modelo matem\u00e1tico do problema"},{"location":"#modelo-computacional-do-problema","text":"optimization/optimizer.py \"\"\" Solver for optimization problem. \"\"\" def build_allocation_problem ( wagons : np . ndarray , locomotives : np . ndarray , total_wagons : int , total_locomotives : int , verbose : bool = True ) -> OptimizationProblem : \"\"\" Build a allocation optimization problem. Args: wagons (np.ndarray): Wagons for each train model. locomotives (np.ndarray): Locomotives for each train model. total_wagons (int): Total of available wagons. total_locomotives (int): Total of available locomotives. verbose (bool, optional): Show problem informations. Defaults to True. Raises: ValueError: Inconsistent problem when total of models is diffents for locomotives and wagons. Also inconsistent problem when or total of available wagons or locomotives are negatives. Returns: OptimizationProblem: structured optimization problem. \"\"\" ... def optimize_allocation ( problem : OptimizationProblem ) -> tuple [ ndarray , ndarray ]: \"\"\" Solver a optimization allocation problem. Args: problem (OptimizationProblem): Structured optimization problem. Returns: tuple[ndarray, ndarray]: train_models end allocation. \"\"\" ...","title":"Modelo computacional do problema"},{"location":"#7-criacao-dos-dados-de-saida-em-python-com-pydantic","text":"","title":"7. Cria\u00e7\u00e3o dos dados de sa\u00edda em Python com Pydantic"},{"location":"#8-recebimento-dos-dados-de-saida-no-formato-json-com-postman","text":"","title":"8. Recebimento dos dados de sa\u00edda no formato JSON com Postman"},{"location":"#9-analise-do-resultado-da-otimizacao","text":"","title":"9. An\u00e1lise do resultado da otimiza\u00e7\u00e3o"},{"location":"challenge/","text":"Desafio ENACOM Python bootcamp O que ser\u00e1 avaliado? As d\u00favidas que foram geradas durante o processo A investiga\u00e7\u00e3o e as poss\u00edveis solu\u00e7\u00f5es para as d\u00favidas Cria\u00e7\u00e3o do ambiente de desenvolvimento local Testes de unidades implementados Estrutura para salvar os resultados da otimiza\u00e7\u00e3o Requisi\u00e7\u00e3o de envio de dados para a rota /solve Requisi\u00e7\u00e3o de busca do resultado da otimiza\u00e7\u00e3o de c\u00f3digo code pela rota /results/{code} Forma de versionar os c\u00f3digos com Git e qualidade das mensagens Para criar o ambiente de desenvolvimento local C\u00f3digos fonte Crie ou acesse sua conta no GitHub Acesse o reposit\u00f3rio https://github.com/enacom/python-bootcamp/ Fa\u00e7a o fork desse reposit\u00f3rio para sua conta Fa\u00e7a o clone do seu reposit\u00f3rio gerado a partir do fork Sincronize seu reposit\u00f3rio com o reposit\u00f3rio que foi feito o fork sempre que necess\u00e1rio O GitHub possui uma documenta\u00e7\u00e3o sobre isso: Syncing a fork Execu\u00e7\u00e3o em ambientes isolados A execu\u00e7\u00e3o da API pode ser feita de dois modos, via Docker / Docker compose (prefer\u00edvel) ou em um ambiente virtual do Python. Docker docker compose build docker compose up ou docker compose up --build Ambiente virtual Python Para criar e ativar um ambiente virtual consulte a documenta\u00e7\u00e3o: Ambientes virtuais e pacotes uvicorn api.main:api --reload --host 0 .0.0.0 --port 9000 Para verificar se a API est\u00e1 ativa acesse: http://0.0.0.0:9000/healthcheck Se a API estiver ativa, a resposta ser\u00e1: status \"ok\" ou {\"status\":\"ok\"} Documenta\u00e7\u00e3o da API Para acessar a documenta\u00e7\u00e3o do API abra o seguinte endere\u00e7o em algum navegador: http://0.0.0.0:9000/docs","title":"Desafio ENACOM Python bootcamp"},{"location":"challenge/#desafio-enacom-python-bootcamp","text":"","title":"Desafio ENACOM Python bootcamp"},{"location":"challenge/#o-que-sera-avaliado","text":"As d\u00favidas que foram geradas durante o processo A investiga\u00e7\u00e3o e as poss\u00edveis solu\u00e7\u00f5es para as d\u00favidas Cria\u00e7\u00e3o do ambiente de desenvolvimento local Testes de unidades implementados Estrutura para salvar os resultados da otimiza\u00e7\u00e3o Requisi\u00e7\u00e3o de envio de dados para a rota /solve Requisi\u00e7\u00e3o de busca do resultado da otimiza\u00e7\u00e3o de c\u00f3digo code pela rota /results/{code} Forma de versionar os c\u00f3digos com Git e qualidade das mensagens","title":"O que ser\u00e1 avaliado?"},{"location":"challenge/#para-criar-o-ambiente-de-desenvolvimento-local","text":"","title":"Para criar o ambiente de desenvolvimento local"},{"location":"challenge/#codigos-fonte","text":"Crie ou acesse sua conta no GitHub Acesse o reposit\u00f3rio https://github.com/enacom/python-bootcamp/ Fa\u00e7a o fork desse reposit\u00f3rio para sua conta Fa\u00e7a o clone do seu reposit\u00f3rio gerado a partir do fork Sincronize seu reposit\u00f3rio com o reposit\u00f3rio que foi feito o fork sempre que necess\u00e1rio O GitHub possui uma documenta\u00e7\u00e3o sobre isso: Syncing a fork","title":"C\u00f3digos fonte"},{"location":"challenge/#execucao-em-ambientes-isolados","text":"A execu\u00e7\u00e3o da API pode ser feita de dois modos, via Docker / Docker compose (prefer\u00edvel) ou em um ambiente virtual do Python.","title":"Execu\u00e7\u00e3o em ambientes isolados"},{"location":"challenge/#docker","text":"docker compose build docker compose up ou docker compose up --build","title":"Docker"},{"location":"challenge/#ambiente-virtual-python","text":"Para criar e ativar um ambiente virtual consulte a documenta\u00e7\u00e3o: Ambientes virtuais e pacotes uvicorn api.main:api --reload --host 0 .0.0.0 --port 9000 Para verificar se a API est\u00e1 ativa acesse: http://0.0.0.0:9000/healthcheck Se a API estiver ativa, a resposta ser\u00e1: status \"ok\" ou {\"status\":\"ok\"}","title":"Ambiente virtual Python"},{"location":"challenge/#documentacao-da-api","text":"Para acessar a documenta\u00e7\u00e3o do API abra o seguinte endere\u00e7o em algum navegador: http://0.0.0.0:9000/docs","title":"Documenta\u00e7\u00e3o da API"}]}